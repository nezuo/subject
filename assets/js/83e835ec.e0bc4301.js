"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[656],{73274:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"```lua\\nlocal subject = Subject.new()\\n```","params":[],"returns":[{"desc":"","lua_type":"Subject"}],"function_type":"static","source":{"line":16,"path":"src/init.lua"}},{"name":"notify","desc":"Calls all subscribers in seperate threads with the arguments passed. The order in which each subscriber is called is undefined.\\n\\n```lua\\nsubject:notify(\\"a\\", 1, true)\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":32,"path":"src/init.lua"}},{"name":"subscribe","desc":"Adds a subscriber to the subject and returns a function to unsubscribe it.\\n\\n```lua\\nlocal unsubscribe = subject:subscribe(function() end)\\n\\nunsubscribe()\\n```","params":[{"name":"subscriber","desc":"","lua_type":"(...: any) -> ...any | thread"}],"returns":[{"desc":"","lua_type":"() -> ()"}],"function_type":"method","source":{"line":56,"path":"src/init.lua"}},{"name":"once","desc":"Adds a subscriber to the subject that is only notified once and returns a function to unsubscribe it.\\n\\n```lua\\nlocal unsubscribe = subject:once(function() end)\\n\\nunsubscribe()\\n```","params":[{"name":"subscriber","desc":"","lua_type":"(...: any) -> ...any | thread"}],"returns":[{"desc":"","lua_type":"() -> ()"}],"function_type":"method","source":{"line":78,"path":"src/init.lua"}},{"name":"promise","desc":"Returns a promise that resolves when the subject is notified. The promise can be canceled.\\n\\n```lua\\nsubject:promise():andThen(function(value)\\n\\tprint(value) -- Hello!\\nend)\\n\\nsubject:notify(\\"Hello!\\")\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"method","source":{"line":101,"path":"src/init.lua"}}],"properties":[],"types":[],"name":"Subject","desc":"","source":{"line":6,"path":"src/init.lua"}}')}}]);